public class Solution {
    private char[][] map =  {{},{           },     {'a','b','c'}, {'d','e','f'}, 
                                {'g','h','i'},     {'j','k','l'}, {'m','n','o'},
                                {'p','q','r','s'}, {'t','u','v'}, {'w','x','y','z'}
                            };
    
    //O(m^n) n = digits.length(); m = average length of each map[i]
    
    public ArrayList<String> letterCombinations(String digits) {
        ArrayList<String> result = new ArrayList<String>();
        if(digits == null || digits.length() == 0) return result;
        
        StringBuffer sb = new StringBuffer();
        
        helper(digits, 0, result, sb);
        
        return result;
    }
    
    public void helper(String digits, int index, ArrayList<String> result, StringBuffer sb) {
        if(index == digits.length()) {
            result.add(new String(sb.toString()));
            return;
        } else {
            int ind = digits.charAt(index) - '0';
            int length = map[ind].length;
            for(int i = 0; i < length; i++) {
                sb.append(map[ind][i]);
                helper(digits,index+1,result,sb);
                sb.deleteCharAt(sb.length()-1);
            }
        }
    }
}
