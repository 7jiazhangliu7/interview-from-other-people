import java.math.BigInteger;
import java.util.*;

/**
 * Created by jiazhangliu on 6/1/15.
 */
public class Solution {
    public List<Point> KPointsClosestToGivenPoint(Point[] array, final Point p, int k) {
        List<Point> result = new LinkedList<Point>();
        if(array == null || p == null) return result;

        Queue<Point> queue = new PriorityQueue<Point>(array.length, new Comparator<Point>(){
            public int compare(Point p1, Point p2) {
                double dis1 = Math.sqrt(Math.pow((p1.x - p.x),2)+ Math.pow((p1.y - p.y),2));
                double dis2 = Math.sqrt(Math.pow((p2.x - p.x),2)+ Math.pow((p2.y - p.y),2));
                double diff = dis1 - dis2;

                if(diff > 0.0) return 1;
                else if (diff < 0.0) return -1;
                else return 0;
            }
        });
        for(Point point : array) {
            queue.add(point);
        }

        for(int i = 0; i < k; i++) {
            result.add(queue.poll());
        }

        return result;
    }

    private static class Point {
        int x, y;
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }


    public static void main(String args[]) {
        Solution s = new Solution();

        final Point p = new Point(0,0);

        Point p1 = new Point(3,4);
        Point p2 = new Point(13,4);
        Point p3 = new Point(2,3);
        Point p4 = new Point(3,3);
        Point p5 = new Point(1,1);
        Point p6 = new Point(3,5);
        Point p7 = new Point(6,4);
        Point p8 = new Point(4,4);
        Point p9 = new Point(9,4);
        Point p10 = new Point(2,5);

        Point[] input = {p1,p2,p3,p4,p5,p6,p7,p8,p9,p10};
        List<Point> result = s.KPointsClosestToGivenPoint(input, p, 5);
        for(Point point : result) {
            System.err.println(point.x + "," + point.y);
        }
    }
}
