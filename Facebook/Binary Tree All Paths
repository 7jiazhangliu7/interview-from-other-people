import java.util.LinkedList;
import java.util.List;

public class Solution {
    public List<List<Integer>> getAllPath(TreeNode root) {
        List<List<Integer>> result = new LinkedList<List<Integer>>();
        if(root == null) return result;

        helper(result, new LinkedList<Integer>(), root);

        return result;
    }

    public void helper(List<List<Integer>> result, List<Integer> list, TreeNode root) {
        if(root.left == null && root.right == null) {
            List<Integer> l = new LinkedList<Integer>(list);
            l.add(root.val);
            result.add(l);
            return;
        }

        list.add(root.val);

        if(root.left != null)
            helper(result, list, root.left);
            //list.remove(list.size()-1);
        if(root.right != null)
            helper(result, list, root.right);
            list.remove(list.size() - 1);
    }

    public static void main(String[] args) {
        Solution s = new Solution();

        TreeNode root = new TreeNode(1);
        TreeNode n1 = new TreeNode(2);
        TreeNode n2 = new TreeNode(3);
        TreeNode n3 = new TreeNode(4);
        TreeNode n4 = new TreeNode(5);
        TreeNode n5 = new TreeNode(6);
        root.left = n1;root.right = n2;
        n1.left = n3;n1.right = n4;
        n2.right = n5;
        System.err.println(s.getAllPath(root)); // 5
    }

    public static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        public TreeNode(int val) {
            this.val = val;
        }
    }
}
