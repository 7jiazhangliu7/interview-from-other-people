import java.math.BigInteger;
import java.util.*;

/**
 * Created by jiazhangliu on 6/1/15.
 */
public class Solution {
    public List<Integer> kClosest (int[] array, int value, int k) {
        List<Integer> result = new LinkedList<Integer>();
        if(array == null || k < 0) return result;

        int start = 0, end = array.length-1;
        int mid;

        while(start+1 < end) {
            mid = (start + end) / 2;

            if(array[mid] > value) {
                end = mid;
            } else {
                start = mid;
            }
        }
System.err.println(start + " " + end);
        if(array[start] == value) {
            end = start+1;
        }

        if(array[end] == value) {
            start = end-1;
        }

        int index = 0;
        while(index < k) {
            result.add(Math.abs(array[start] - value) <= Math.abs(array[end]-value) ? array[start] : array[end]);
            index++;
            if(start > 0 && result.get(result.size()-1) == array[start]) start--;
            if(end < array.length && result.get(result.size()-1) == array[end]) end++;
        }

        return result;
    }

    public static void main(String args[]) {
        Solution s = new Solution();

        int[] input = {1,2,3,4,5,6,7,8,9,10};

        System.err.println(s.kClosest(input, 6, 5));
    }
}
