import java.util.*;

class Solution {
    public ListNode addTwoBinary(ListNode n1, ListNode n2) {
        if(n1 == null || n2 == null) return n1 == null ? n2 : n1;

        int carry = 0;

        ListNode dummy = new ListNode(Integer.MIN_VALUE);
        ListNode temp = dummy;

        while(n1 != null && n2 != null) {
            int sum = n1.val + n2.val + carry;
            temp.next = new ListNode(sum % 2);
            carry = sum / 2;
            temp = temp.next;
            n1 = n1.next;
            n2 = n2.next;
        }

        if(n1 != null) {
            while(n1 != null) {
                int sum = n1.val + carry;
                temp.next = new ListNode(sum % 2);
                carry = sum / 2;
                temp = temp.next;
                n1 = n1.next;
            }
        }

        if(n2 != null) {
            while(n2 != null) {
                int sum = n2.val + carry;
                temp.next = new ListNode(sum % 2);
                carry = sum / 2;
                temp = temp.next;
                n2 = n2.next;
            }
        }

        if(carry == 1) {
            temp.next = new ListNode(1);
        }

        return dummy.next;
    }

    public void print(ListNode head) {
        while(head != null) {
            System.err.print(head.val + " ");
            head = head.next;
        }
    }

    public static void main(String args[]) {
        Solution s = new Solution();

        ListNode root = new ListNode(1);
        ListNode n1 = new ListNode(1);
        ListNode n2 = new ListNode(1);
        ListNode n3 = new ListNode(1);
        ListNode n4 = new ListNode(1);
        ListNode n5 = new ListNode(1);

        root.next = n1;n1.next = n2;

        n2.next = n3; n3.next = n4;


        s.print(s.addTwoBinary(root, n5));
    }

    static class ListNode {
        int val;
        ListNode next;

        public ListNode(int val) {
            this.val = val;
        }
    }
}
