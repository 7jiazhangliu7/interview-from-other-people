public class Solution {
    // O(n^2) n + n-1 + n-2 + n-3 + .... + 2 + 1
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        
        if(candidates == null || candidates.length == 0) {
            return result;
        }
        
        Arrays.sort(candidates);
        helper(candidates, target, 0, result, new LinkedList<Integer>());
        
        return result;
    }
    
    private void helper(int[] candidates, int target, int index, List<List<Integer>> result, List<Integer> temp) {
        if(target == 0) {
            result.add(new LinkedList<Integer>(temp));
            return;
        }
        
        if(target < 0) return;
        
        for(int i = index; i < candidates.length; i++) {
            temp.add(candidates[i]);
            helper(candidates, target-candidates[i], i, result, temp);
            temp.remove(temp.size()-1);
        }
    }
}
