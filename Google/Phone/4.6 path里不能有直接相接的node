//http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=134953&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3086%5D%5Bvalue%5D%3D5%26searchoption%5B3086%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D1%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

import java.util.Stack;

class Solution {
    int max = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        if(root == null) return -1;
        helper1(root);
        helper1(root.left);
        helper1(root.right);
        return max;
    }

    public int helper(TreeNode node) {
        if (node == null) return 0;

        int left = Math.max(0, helper(node.left));
        int right = Math.max(0, helper(node.right));

        max = Math.max(max, node.val+left+right);
        return node.val + Math.max(left, right);
    }

    public int helper1(TreeNode node) {
        if (node == null) return 0;

        int leftleft = Math.max(0, helper(node.left == null ? node.left : node.left.left));
        int leftright = Math.max(0, helper(node.left == null ? node.left : node.left.right));

        int rightleft = Math.max(0, helper(node.right == null ? node.right : node.right.left));
        int rightright = Math.max(0, helper(node.right == null ? node.right : node.right.right));

        max = Math.max(max, node.val+Math.max(leftleft,leftright)+Math.max(rightleft,rightright));
        return node.val + Math.max(Math.max(leftleft,leftright),Math.max(rightleft,rightright));
    }


    public static void main(String args[]) {
        Solution s = new Solution();

        TreeNode root = new TreeNode(5);
        TreeNode n1 = new TreeNode(-6);
        TreeNode n2 = new TreeNode(3);
        TreeNode n3 = new TreeNode(7);
        TreeNode n4 = new TreeNode(10);
        TreeNode n5 = new TreeNode(1);
        root.left = n1;root.right = n2;
        n1.left = n3;n1.right = n4;
        n2.left = n5;

        System.err.println(s.maxPathSum(root));
    }

    static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
        public TreeNode(int val) {this.val = val;}
    }
}
